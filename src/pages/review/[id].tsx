import { ArrowLeftIcon, ArrowRightIcon } from '@heroicons/react/24/solid';
import dynamic from 'next/dynamic';
import Image from 'next/image';
import { useRouter } from 'next/router';
import React, { useEffect } from 'react';
import { useAuth } from 'react-oidc-context';

import { IIASAFieldSurveyEnumReviewStatus } from '@/api/autoGenerated/schemas';
import {
  useGetSurveySurveyIdReview,
  useGetSurveySurveyIdReviewNext,
} from '@/api/autoGenerated/survey-review/survey-review';
import SubmitReview from '@/components/submitReview';
import { Meta } from '@/layouts/Meta';
import { Main } from '@/templates/Main';
import { getBackgroundImage } from '@/utils/backgroundImage';
import { isReviewer } from '@/utils/Helpers';

export default function ReviewSurvey() {
  const router = useRouter();
  const auth = useAuth();

  const {
    query: { id, status },
  } = router;

  const { data, queryKey } = useGetSurveySurveyIdReview(
    parseInt(id as string, 10),
    {
      query: { enabled: auth.isAuthenticated && id !== undefined },
    }
  );

  function getReviewStatus() {
    return status === undefined
      ? IIASAFieldSurveyEnumReviewStatus.NotReviewed
      : (status as IIASAFieldSurveyEnumReviewStatus);
  }

  const nextSurvey = useGetSurveySurveyIdReviewNext(
    parseInt(id as string, 10),
    {
      next: true,
      reviewStatus: getReviewStatus(),
    },
    { query: { enabled: false } }
  );

  const previousSurvey = useGetSurveySurveyIdReviewNext(
    parseInt(id as string, 10),
    {
      next: false,
      reviewStatus: getReviewStatus(),
    },
    { query: { enabled: false } }
  );

  const Map = dynamic(() => import('../../components/map'), {
    ssr: false,
  });

  useEffect(() => {
    if (!auth.isAuthenticated) {
      auth
        .signinSilent()
        .then((user) => {
          if (user === null) {
            router.push('\\').then();
          }
        })
        .catch(() => {
          router.push('\\').then();
        });
    } else if (!isReviewer(auth)) {
      router.push(`${router.basePath}/user`).then();
    }
  }, []);

  if (id === undefined) {
    return <>Loading...</>;
  }

  function navigateToNext(moveNext: boolean) {
    if (moveNext) {
      nextSurvey.refetch().then((res) => {
        router.push(`/review/${res.data}?status=${getReviewStatus()}`).then();
      });
    } else {
      previousSurvey.refetch().then((res) => {
        router.push(`/review/${res.data}?status=${getReviewStatus()}`).then();
      });
    }
  }

  function OnSubmitClick() {
    nextSurvey.refetch().then((res) => {
      if (res.data !== parseInt(id as string, 10)) {
        router.push(`/review/${res.data}?status=${getReviewStatus()}`).then();
      } else {
        previousSurvey.refetch().then((res2) => {
          router
            .push(`/review/${res2.data}?status=${getReviewStatus()}`)
            .then();
        });
      }
    });
  }

  function navSurveys() {
    return (
      <div className="grid w-full grid-cols-2 ">
        <div className="text-left">
          <button
            type="button"
            onClick={() => {
              navigateToNext(true);
            }}
            className="inline-flex items-center border-y-2 border-transparent pl-1 pt-4 text-sm font-medium text-white hover:border-gray-300 hover:text-gray-200"
          >
            <ArrowLeftIcon
              className="mr-3 h-5 w-5 text-white"
              aria-hidden="true"
            />
            Previous
          </button>
        </div>
        <div className="text-right">
          <button
            type="button"
            onClick={() => {
              navigateToNext(false);
            }}
            className="inline-flex items-center border-y-2 border-transparent pl-1 pt-4 text-sm font-medium text-white hover:border-gray-300 hover:text-gray-200"
          >
            Next
            <ArrowRightIcon
              className="ml-3 h-5 w-5 text-white"
              aria-hidden="true"
            />
          </button>
        </div>
      </div>
    );
  }

  function showDetails() {
    return (
      <div className="max-w-screen-3xl mx-auto h-auto bg-white/30 px-4 py-5 pt-24 backdrop-blur-xl sm:px-6 lg:max-w-screen-2xl ">
        <dl className="my-2  pt-2">{navSurveys()}</dl>
        <dl className="grid grid-cols-1 gap-x-4 gap-y-8 rounded-md border-t border-black bg-gray-900 py-8 pl-2 text-lg font-medium text-white sm:grid-cols-2 md:px-12 lg:grid-cols-4">
          {/* Survey */}
          <div className="sm:col-span-1">
            <dt className="font-bold text-gray-500">Survey Id</dt>
            <dd className="mt-1">{data?.surveyId}</dd>
          </div>
          <div className="sm:col-span-1">
            <dt className="font-bold text-gray-500">Survey Creator</dt>
            <dd className="mt-1 ">{data?.surveyCreator}</dd>
          </div>
          <div className="sm:col-span-1">
            <dt className="font-bold text-gray-500">Survey Creator EmailId</dt>
            <dd className="mt-1 ">{data?.surveyCreatorEmailId}</dd>
          </div>
          <div className="sm:col-span-1">
            <dt className="font-bold text-gray-500">
              Survey Submission Datetime
            </dt>
            <dd className="mt-1 ">
              {data?.surveyCreationTime?.substring(0, 16)}
            </dd>
          </div>
          {/* Review */}
          {data?.lastUpdatedBy !== undefined &&
            data?.lastUpdatedBy !== null && (
              <>
                <div className="sm:col-span-1">
                  <dt className="font-bold text-gray-500">Review Id</dt>
                  <dd className="mt-1">{data?.id}</dd>
                </div>
                <div className="sm:col-span-1">
                  <dt className="font-bold text-gray-500">Reviewer</dt>
                  <dd className="mt-1 ">{data?.lastUpdatedBy}</dd>
                </div>
                <div className="sm:col-span-1">
                  <dt className="font-bold text-gray-500">Reviewer EmailId</dt>
                  <dd className="mt-1 ">{data?.lastUpdatedByEmailId}</dd>
                </div>
                <div className="sm:col-span-1">
                  <dt className="font-bold text-gray-500">
                    Review Update Datetime
                  </dt>
                  <dd className="mt-1 ">
                    {data?.createOrUpdateTime?.substring(0, 16)}
                  </dd>
                </div>
                <div className="sm:col-span-1">
                  <dt className="font-bold text-gray-500">Review Status</dt>
                  <dd className="mt-1 ">{data?.status}</dd>
                </div>
                <div className="sm:col-span-2 lg:col-span-1">
                  <dt className="font-bold text-gray-500">Review Comments</dt>
                  <dd className="mt-1 ">{data?.comment}</dd>
                </div>
                <div className="sm:col-span-2 lg:col-span-1">
                  <dt className="font-bold text-gray-500">Ratings</dt>
                  <dd className="mt-1 ">{data?.surveyRating}</dd>
                </div>
                <div className="sm:col-span-2 lg:col-span-1">
                  <dt className="font-bold text-gray-500">Score (tokens)</dt>
                  <dd className="mt-1 ">
                    {(data?.surveyRating as number) * 10}(
                    {(data?.surveyRating as number) * 5})
                  </dd>
                </div>
              </>
            )}
        </dl>
        <dl className="mt-4 grid grid-cols-1 gap-x-4 gap-y-8 rounded-md border-t border-black bg-gray-900 py-8 pl-2 text-lg font-medium text-white sm:grid-cols-2 md:px-12 lg:grid-cols-4">
          {data?.surveyQandAs
            ?.filter((x) => (x.order as number) > 5)
            .map((item) => (
              <div key={item.order} className="sm:col-span-2 lg:col-span-1">
                <dt className="font-bold text-gray-500">{item.question}</dt>
                <dd className="mt-1 ">{item.answer}</dd>
              </div>
            ))}
        </dl>
      </div>
    );
  }

  function showReviewDetails() {
    return (
      <div className="relative isolate h-auto bg-black/90 ">
        {getBackgroundImage()}
        {showDetails()}
        <div className="max-w-screen-3xl mx-auto py-4 lg:max-w-screen-2xl ">
          <Map images={data?.images} location={data?.location} />
        </div>
        <div className="max-w-screen-3xl mx-auto h-auto py-4 lg:max-w-screen-2xl ">
          <h2>All Images</h2>
          <dl className="grid grid-cols-1 gap-x-4 gap-y-8 border-t border-black backdrop-blur-xl sm:grid-cols-2  lg:grid-cols-4  ">
            {/* Survey */}
            {data?.images?.map((img) => (
              <div key={`${img.id}div`} className="sm:col-span-1">
                <Image
                  width={720}
                  height={320}
                  loading="lazy"
                  className="h-80 w-96"
                  key={`image${img.id}`}
                  src={img.storageUrl as string}
                  alt={`Survey Image:${img.id}`}
                />
                <span>
                  {JSON.parse(decodeURIComponent(img.data as string)).type}
                </span>
              </div>
            ))}
          </dl>
        </div>
        <div className="max-w-screen-3xl mx-auto h-auto py-4 lg:max-w-screen-2xl ">
          {data && (
            <SubmitReview
              surveyId={id as string}
              queryKey={queryKey}
              onSubmitClick={() => {
                OnSubmitClick();
              }}
              input={{
                status: data?.status as IIASAFieldSurveyEnumReviewStatus,
                comments: data?.comment as string,
                rating: data?.surveyRating as number,
              }}
            />
          )}
          {navSurveys()}
        </div>
      </div>
    );
  }

  return (
    <Main
      meta={
        <Meta
          title="Donate Water Surveys"
          description="Review Surveys from Donate water project"
        />
      }
    >
      {showReviewDetails()}
    </Main>
  );
}
