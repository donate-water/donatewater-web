/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useMutation
} from '@tanstack/react-query'
import type {
  MutationFunction,
  UseMutationOptions
} from '@tanstack/react-query'
import type {
  VoloAbpAccountRegisterDto,
  VoloAbpAccountResetPasswordDto,
  VoloAbpAccountSendPasswordResetCodeDto,
  VoloAbpAccountVerifyPasswordResetTokenInput,
  VoloAbpHttpRemoteServiceErrorResponse,
  VoloAbpIdentityIdentityUserDto
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postApiAccountRegister = (
    voloAbpAccountRegisterDto: NonReadonly<VoloAbpAccountRegisterDto>,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<VoloAbpIdentityIdentityUserDto>(
      {url: `/api/account/register`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountRegisterDto
    },
      options);
    }
  


export const getPostApiAccountRegisterMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountRegister>>, TError,{data: NonReadonly<VoloAbpAccountRegisterDto>}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountRegister>>, TError,{data: NonReadonly<VoloAbpAccountRegisterDto>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountRegister>>, {data: NonReadonly<VoloAbpAccountRegisterDto>}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountRegister(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountRegisterMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountRegister>>>
    export type PostApiAccountRegisterMutationBody = NonReadonly<VoloAbpAccountRegisterDto>
    export type PostApiAccountRegisterMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiAccountRegister = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountRegister>>, TError,{data: NonReadonly<VoloAbpAccountRegisterDto>}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiAccountRegisterMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postApiAccountSendPasswordResetCode = (
    voloAbpAccountSendPasswordResetCodeDto: VoloAbpAccountSendPasswordResetCodeDto,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/api/account/send-password-reset-code`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountSendPasswordResetCodeDto
    },
      options);
    }
  


export const getPostApiAccountSendPasswordResetCodeMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountSendPasswordResetCode>>, TError,{data: VoloAbpAccountSendPasswordResetCodeDto}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountSendPasswordResetCode>>, TError,{data: VoloAbpAccountSendPasswordResetCodeDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountSendPasswordResetCode>>, {data: VoloAbpAccountSendPasswordResetCodeDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountSendPasswordResetCode(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountSendPasswordResetCodeMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountSendPasswordResetCode>>>
    export type PostApiAccountSendPasswordResetCodeMutationBody = VoloAbpAccountSendPasswordResetCodeDto
    export type PostApiAccountSendPasswordResetCodeMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiAccountSendPasswordResetCode = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountSendPasswordResetCode>>, TError,{data: VoloAbpAccountSendPasswordResetCodeDto}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiAccountSendPasswordResetCodeMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postApiAccountVerifyPasswordResetToken = (
    voloAbpAccountVerifyPasswordResetTokenInput: VoloAbpAccountVerifyPasswordResetTokenInput,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<boolean>(
      {url: `/api/account/verify-password-reset-token`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountVerifyPasswordResetTokenInput
    },
      options);
    }
  


export const getPostApiAccountVerifyPasswordResetTokenMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountVerifyPasswordResetToken>>, TError,{data: VoloAbpAccountVerifyPasswordResetTokenInput}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountVerifyPasswordResetToken>>, TError,{data: VoloAbpAccountVerifyPasswordResetTokenInput}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountVerifyPasswordResetToken>>, {data: VoloAbpAccountVerifyPasswordResetTokenInput}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountVerifyPasswordResetToken(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountVerifyPasswordResetTokenMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountVerifyPasswordResetToken>>>
    export type PostApiAccountVerifyPasswordResetTokenMutationBody = VoloAbpAccountVerifyPasswordResetTokenInput
    export type PostApiAccountVerifyPasswordResetTokenMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiAccountVerifyPasswordResetToken = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountVerifyPasswordResetToken>>, TError,{data: VoloAbpAccountVerifyPasswordResetTokenInput}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiAccountVerifyPasswordResetTokenMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postApiAccountResetPassword = (
    voloAbpAccountResetPasswordDto: VoloAbpAccountResetPasswordDto,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/api/account/reset-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountResetPasswordDto
    },
      options);
    }
  


export const getPostApiAccountResetPasswordMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountResetPassword>>, TError,{data: VoloAbpAccountResetPasswordDto}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountResetPassword>>, TError,{data: VoloAbpAccountResetPasswordDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountResetPassword>>, {data: VoloAbpAccountResetPasswordDto}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountResetPassword(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountResetPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountResetPassword>>>
    export type PostApiAccountResetPasswordMutationBody = VoloAbpAccountResetPasswordDto
    export type PostApiAccountResetPasswordMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiAccountResetPassword = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountResetPassword>>, TError,{data: VoloAbpAccountResetPasswordDto}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiAccountResetPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    