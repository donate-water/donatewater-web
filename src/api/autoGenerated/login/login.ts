/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  VoloAbpAccountWebAreasAccountControllersModelsAbpLoginResult,
  VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo,
  VoloAbpHttpRemoteServiceErrorResponse
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postApiAccountLogin = (
    voloAbpAccountWebAreasAccountControllersModelsUserLoginInfo: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<VoloAbpAccountWebAreasAccountControllersModelsAbpLoginResult>(
      {url: `/api/account/login`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountWebAreasAccountControllersModelsUserLoginInfo
    },
      options);
    }
  


export const getPostApiAccountLoginMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogin>>, TError,{data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogin>>, TError,{data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountLogin>>, {data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountLogin(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountLoginMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountLogin>>>
    export type PostApiAccountLoginMutationBody = VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo
    export type PostApiAccountLoginMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiAccountLogin = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountLogin>>, TError,{data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiAccountLoginMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getApiAccountLogout = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<void>(
      {url: `/api/account/logout`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiAccountLogoutQueryKey = () => {
    return [`/api/account/logout`] as const;
    }

    
export const getGetApiAccountLogoutQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountLogout>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountLogout>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountLogoutQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountLogout>>> = ({ signal }) => getApiAccountLogout(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAccountLogout>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiAccountLogoutQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountLogout>>>
export type GetApiAccountLogoutQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetApiAccountLogout = <TData = Awaited<ReturnType<typeof getApiAccountLogout>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountLogout>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountLogoutQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiAccountCheckPassword = (
    voloAbpAccountWebAreasAccountControllersModelsUserLoginInfo: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<VoloAbpAccountWebAreasAccountControllersModelsAbpLoginResult>(
      {url: `/api/account/check-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountWebAreasAccountControllersModelsUserLoginInfo
    },
      options);
    }
  


export const getPostApiAccountCheckPasswordMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCheckPassword>>, TError,{data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCheckPassword>>, TError,{data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountCheckPassword>>, {data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountCheckPassword(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountCheckPasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountCheckPassword>>>
    export type PostApiAccountCheckPasswordMutationBody = VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo
    export type PostApiAccountCheckPasswordMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiAccountCheckPassword = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountCheckPassword>>, TError,{data: VoloAbpAccountWebAreasAccountControllersModelsUserLoginInfo}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiAccountCheckPasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    