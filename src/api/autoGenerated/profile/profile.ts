/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  VoloAbpAccountChangePasswordInput,
  VoloAbpAccountProfileDto,
  VoloAbpAccountUpdateProfileDto,
  VoloAbpHttpRemoteServiceErrorResponse
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getApiAccountMyProfile = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<VoloAbpAccountProfileDto>(
      {url: `/api/account/my-profile`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiAccountMyProfileQueryKey = () => {
    return [`/api/account/my-profile`] as const;
    }

    
export const getGetApiAccountMyProfileQueryOptions = <TData = Awaited<ReturnType<typeof getApiAccountMyProfile>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountMyProfile>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiAccountMyProfileQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiAccountMyProfile>>> = ({ signal }) => getApiAccountMyProfile(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiAccountMyProfile>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiAccountMyProfileQueryResult = NonNullable<Awaited<ReturnType<typeof getApiAccountMyProfile>>>
export type GetApiAccountMyProfileQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetApiAccountMyProfile = <TData = Awaited<ReturnType<typeof getApiAccountMyProfile>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiAccountMyProfile>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiAccountMyProfileQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiAccountMyProfile = (
    voloAbpAccountUpdateProfileDto: NonReadonly<VoloAbpAccountUpdateProfileDto>,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<VoloAbpAccountProfileDto>(
      {url: `/api/account/my-profile`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountUpdateProfileDto
    },
      options);
    }
  


export const getPutApiAccountMyProfileMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountMyProfile>>, TError,{data: NonReadonly<VoloAbpAccountUpdateProfileDto>}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiAccountMyProfile>>, TError,{data: NonReadonly<VoloAbpAccountUpdateProfileDto>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiAccountMyProfile>>, {data: NonReadonly<VoloAbpAccountUpdateProfileDto>}> = (props) => {
          const {data} = props ?? {};

          return  putApiAccountMyProfile(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiAccountMyProfileMutationResult = NonNullable<Awaited<ReturnType<typeof putApiAccountMyProfile>>>
    export type PutApiAccountMyProfileMutationBody = NonReadonly<VoloAbpAccountUpdateProfileDto>
    export type PutApiAccountMyProfileMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePutApiAccountMyProfile = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiAccountMyProfile>>, TError,{data: NonReadonly<VoloAbpAccountUpdateProfileDto>}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPutApiAccountMyProfileMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postApiAccountMyProfileChangePassword = (
    voloAbpAccountChangePasswordInput: VoloAbpAccountChangePasswordInput,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/api/account/my-profile/change-password`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpAccountChangePasswordInput
    },
      options);
    }
  


export const getPostApiAccountMyProfileChangePasswordMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountMyProfileChangePassword>>, TError,{data: VoloAbpAccountChangePasswordInput}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiAccountMyProfileChangePassword>>, TError,{data: VoloAbpAccountChangePasswordInput}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiAccountMyProfileChangePassword>>, {data: VoloAbpAccountChangePasswordInput}> = (props) => {
          const {data} = props ?? {};

          return  postApiAccountMyProfileChangePassword(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiAccountMyProfileChangePasswordMutationResult = NonNullable<Awaited<ReturnType<typeof postApiAccountMyProfileChangePassword>>>
    export type PostApiAccountMyProfileChangePasswordMutationBody = VoloAbpAccountChangePasswordInput
    export type PostApiAccountMyProfileChangePasswordMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiAccountMyProfileChangePassword = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiAccountMyProfileChangePassword>>, TError,{data: VoloAbpAccountChangePasswordInput}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiAccountMyProfileChangePasswordMutationOptions(options);

      return useMutation(mutationOptions);
    }
    