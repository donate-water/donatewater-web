/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  IIASAFieldSurveyServicesLeaderboardServiceStats,
  VoloAbpHttpRemoteServiceErrorResponse
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getLeaderboardStats = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyServicesLeaderboardServiceStats>(
      {url: `/leaderboard/stats`, method: 'GET', signal
    },
      options);
    }
  

export const getGetLeaderboardStatsQueryKey = () => {
    return [`/leaderboard/stats`] as const;
    }

    
export const getGetLeaderboardStatsQueryOptions = <TData = Awaited<ReturnType<typeof getLeaderboardStats>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLeaderboardStats>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLeaderboardStatsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLeaderboardStats>>> = ({ signal }) => getLeaderboardStats(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLeaderboardStats>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLeaderboardStatsQueryResult = NonNullable<Awaited<ReturnType<typeof getLeaderboardStats>>>
export type GetLeaderboardStatsQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetLeaderboardStats = <TData = Awaited<ReturnType<typeof getLeaderboardStats>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLeaderboardStats>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLeaderboardStatsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



