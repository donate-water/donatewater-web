/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetSurveyReviewParams,
  GetSurveySurveyIdReviewNextParams,
  IIASAFieldSurveyDtosReviewDetailsDto,
  IIASAFieldSurveyDtosSaveReviewDto,
  VoloAbpApplicationDtosPagedResultDto1IIASAFieldSurveyDtosReviewDtoIIASAFieldSurveyApplicationContractsVersion1000CultureNeutralPublicKeyTokenNull,
  VoloAbpHttpRemoteServiceErrorResponse
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postSurveySurveyIdReview = (
    surveyId: number,
    iIASAFieldSurveyDtosSaveReviewDto: IIASAFieldSurveyDtosSaveReviewDto,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/survey/${surveyId}/review`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iIASAFieldSurveyDtosSaveReviewDto
    },
      options);
    }
  


export const getPostSurveySurveyIdReviewMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSurveySurveyIdReview>>, TError,{surveyId: number;data: IIASAFieldSurveyDtosSaveReviewDto}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postSurveySurveyIdReview>>, TError,{surveyId: number;data: IIASAFieldSurveyDtosSaveReviewDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSurveySurveyIdReview>>, {surveyId: number;data: IIASAFieldSurveyDtosSaveReviewDto}> = (props) => {
          const {surveyId,data} = props ?? {};

          return  postSurveySurveyIdReview(surveyId,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostSurveySurveyIdReviewMutationResult = NonNullable<Awaited<ReturnType<typeof postSurveySurveyIdReview>>>
    export type PostSurveySurveyIdReviewMutationBody = IIASAFieldSurveyDtosSaveReviewDto
    export type PostSurveySurveyIdReviewMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostSurveySurveyIdReview = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSurveySurveyIdReview>>, TError,{surveyId: number;data: IIASAFieldSurveyDtosSaveReviewDto}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostSurveySurveyIdReviewMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getSurveySurveyIdReview = (
    surveyId: number,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyDtosReviewDetailsDto>(
      {url: `/survey/${surveyId}/review`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSurveySurveyIdReviewQueryKey = (surveyId: number,) => {
    return [`/survey/${surveyId}/review`] as const;
    }

    
export const getGetSurveySurveyIdReviewQueryOptions = <TData = Awaited<ReturnType<typeof getSurveySurveyIdReview>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(surveyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyIdReview>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSurveySurveyIdReviewQueryKey(surveyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSurveySurveyIdReview>>> = ({ signal }) => getSurveySurveyIdReview(surveyId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(surveyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyIdReview>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSurveySurveyIdReviewQueryResult = NonNullable<Awaited<ReturnType<typeof getSurveySurveyIdReview>>>
export type GetSurveySurveyIdReviewQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetSurveySurveyIdReview = <TData = Awaited<ReturnType<typeof getSurveySurveyIdReview>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 surveyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyIdReview>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSurveySurveyIdReviewQueryOptions(surveyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSurveyReview = (
    params?: GetSurveyReviewParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<VoloAbpApplicationDtosPagedResultDto1IIASAFieldSurveyDtosReviewDtoIIASAFieldSurveyApplicationContractsVersion1000CultureNeutralPublicKeyTokenNull>(
      {url: `/survey/review`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSurveyReviewQueryKey = (params?: GetSurveyReviewParams,) => {
    return [`/survey/review`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSurveyReviewQueryOptions = <TData = Awaited<ReturnType<typeof getSurveyReview>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetSurveyReviewParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveyReview>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSurveyReviewQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSurveyReview>>> = ({ signal }) => getSurveyReview(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSurveyReview>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSurveyReviewQueryResult = NonNullable<Awaited<ReturnType<typeof getSurveyReview>>>
export type GetSurveyReviewQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetSurveyReview = <TData = Awaited<ReturnType<typeof getSurveyReview>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetSurveyReviewParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveyReview>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSurveyReviewQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSurveySurveyIdReviewNext = (
    surveyId: number,
    params?: GetSurveySurveyIdReviewNextParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<number>(
      {url: `/survey/${surveyId}/review/next`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSurveySurveyIdReviewNextQueryKey = (surveyId: number,
    params?: GetSurveySurveyIdReviewNextParams,) => {
    return [`/survey/${surveyId}/review/next`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSurveySurveyIdReviewNextQueryOptions = <TData = Awaited<ReturnType<typeof getSurveySurveyIdReviewNext>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(surveyId: number,
    params?: GetSurveySurveyIdReviewNextParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyIdReviewNext>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSurveySurveyIdReviewNextQueryKey(surveyId,params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSurveySurveyIdReviewNext>>> = ({ signal }) => getSurveySurveyIdReviewNext(surveyId,params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(surveyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyIdReviewNext>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSurveySurveyIdReviewNextQueryResult = NonNullable<Awaited<ReturnType<typeof getSurveySurveyIdReviewNext>>>
export type GetSurveySurveyIdReviewNextQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetSurveySurveyIdReviewNext = <TData = Awaited<ReturnType<typeof getSurveySurveyIdReviewNext>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 surveyId: number,
    params?: GetSurveySurveyIdReviewNextParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyIdReviewNext>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSurveySurveyIdReviewNextQueryOptions(surveyId,params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



