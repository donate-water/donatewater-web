/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetApiIdentityRolesParams,
  VoloAbpApplicationDtosListResultDto1VoloAbpIdentityIdentityRoleDtoVoloAbpIdentityApplicationContractsVersion7020CultureNeutralPublicKeyTokenNull,
  VoloAbpApplicationDtosPagedResultDto1VoloAbpIdentityIdentityRoleDtoVoloAbpIdentityApplicationContractsVersion7020CultureNeutralPublicKeyTokenNull,
  VoloAbpHttpRemoteServiceErrorResponse,
  VoloAbpIdentityIdentityRoleCreateDto,
  VoloAbpIdentityIdentityRoleDto,
  VoloAbpIdentityIdentityRoleUpdateDto
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';

// https://stackoverflow.com/questions/49579094/typescript-conditional-types-filter-out-readonly-properties-pick-only-requir/49579497#49579497
type IfEquals<X, Y, A = X, B = never> = (<T>() => T extends X ? 1 : 2) extends <
T,
>() => T extends Y ? 1 : 2
? A
: B;

type WritableKeys<T> = {
[P in keyof T]-?: IfEquals<
  { [Q in P]: T[P] },
  { -readonly [Q in P]: T[P] },
  P
>;
}[keyof T];

type UnionToIntersection<U> =
  (U extends any ? (k: U)=>void : never) extends ((k: infer I)=>void) ? I : never;
type DistributeReadOnlyOverUnions<T> = T extends any ? NonReadonly<T> : never;

type Writable<T> = Pick<T, WritableKeys<T>>;
type NonReadonly<T> = [T] extends [UnionToIntersection<T>] ? {
  [P in keyof Writable<T>]: T[P] extends object
    ? NonReadonly<NonNullable<T[P]>>
    : T[P];
} : DistributeReadOnlyOverUnions<T>;



type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getApiIdentityRolesAll = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<VoloAbpApplicationDtosListResultDto1VoloAbpIdentityIdentityRoleDtoVoloAbpIdentityApplicationContractsVersion7020CultureNeutralPublicKeyTokenNull>(
      {url: `/api/identity/roles/all`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiIdentityRolesAllQueryKey = () => {
    return [`/api/identity/roles/all`] as const;
    }

    
export const getGetApiIdentityRolesAllQueryOptions = <TData = Awaited<ReturnType<typeof getApiIdentityRolesAll>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRolesAll>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiIdentityRolesAllQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiIdentityRolesAll>>> = ({ signal }) => getApiIdentityRolesAll(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRolesAll>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiIdentityRolesAllQueryResult = NonNullable<Awaited<ReturnType<typeof getApiIdentityRolesAll>>>
export type GetApiIdentityRolesAllQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetApiIdentityRolesAll = <TData = Awaited<ReturnType<typeof getApiIdentityRolesAll>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRolesAll>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiIdentityRolesAllQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getApiIdentityRoles = (
    params?: GetApiIdentityRolesParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<VoloAbpApplicationDtosPagedResultDto1VoloAbpIdentityIdentityRoleDtoVoloAbpIdentityApplicationContractsVersion7020CultureNeutralPublicKeyTokenNull>(
      {url: `/api/identity/roles`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetApiIdentityRolesQueryKey = (params?: GetApiIdentityRolesParams,) => {
    return [`/api/identity/roles`, ...(params ? [params]: [])] as const;
    }

    
export const getGetApiIdentityRolesQueryOptions = <TData = Awaited<ReturnType<typeof getApiIdentityRoles>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetApiIdentityRolesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRoles>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiIdentityRolesQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiIdentityRoles>>> = ({ signal }) => getApiIdentityRoles(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRoles>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiIdentityRolesQueryResult = NonNullable<Awaited<ReturnType<typeof getApiIdentityRoles>>>
export type GetApiIdentityRolesQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetApiIdentityRoles = <TData = Awaited<ReturnType<typeof getApiIdentityRoles>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetApiIdentityRolesParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRoles>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiIdentityRolesQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const postApiIdentityRoles = (
    voloAbpIdentityIdentityRoleCreateDto: NonReadonly<VoloAbpIdentityIdentityRoleCreateDto>,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<VoloAbpIdentityIdentityRoleDto>(
      {url: `/api/identity/roles`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpIdentityIdentityRoleCreateDto
    },
      options);
    }
  


export const getPostApiIdentityRolesMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiIdentityRoles>>, TError,{data: NonReadonly<VoloAbpIdentityIdentityRoleCreateDto>}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postApiIdentityRoles>>, TError,{data: NonReadonly<VoloAbpIdentityIdentityRoleCreateDto>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postApiIdentityRoles>>, {data: NonReadonly<VoloAbpIdentityIdentityRoleCreateDto>}> = (props) => {
          const {data} = props ?? {};

          return  postApiIdentityRoles(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostApiIdentityRolesMutationResult = NonNullable<Awaited<ReturnType<typeof postApiIdentityRoles>>>
    export type PostApiIdentityRolesMutationBody = NonReadonly<VoloAbpIdentityIdentityRoleCreateDto>
    export type PostApiIdentityRolesMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostApiIdentityRoles = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postApiIdentityRoles>>, TError,{data: NonReadonly<VoloAbpIdentityIdentityRoleCreateDto>}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostApiIdentityRolesMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getApiIdentityRolesId = (
    id: string,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<VoloAbpIdentityIdentityRoleDto>(
      {url: `/api/identity/roles/${id}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetApiIdentityRolesIdQueryKey = (id: string,) => {
    return [`/api/identity/roles/${id}`] as const;
    }

    
export const getGetApiIdentityRolesIdQueryOptions = <TData = Awaited<ReturnType<typeof getApiIdentityRolesId>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRolesId>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetApiIdentityRolesIdQueryKey(id);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getApiIdentityRolesId>>> = ({ signal }) => getApiIdentityRolesId(id, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(id), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRolesId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetApiIdentityRolesIdQueryResult = NonNullable<Awaited<ReturnType<typeof getApiIdentityRolesId>>>
export type GetApiIdentityRolesIdQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetApiIdentityRolesId = <TData = Awaited<ReturnType<typeof getApiIdentityRolesId>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 id: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getApiIdentityRolesId>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetApiIdentityRolesIdQueryOptions(id,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const putApiIdentityRolesId = (
    id: string,
    voloAbpIdentityIdentityRoleUpdateDto: NonReadonly<VoloAbpIdentityIdentityRoleUpdateDto>,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<VoloAbpIdentityIdentityRoleDto>(
      {url: `/api/identity/roles/${id}`, method: 'PUT',
      headers: {'Content-Type': 'application/json', },
      data: voloAbpIdentityIdentityRoleUpdateDto
    },
      options);
    }
  


export const getPutApiIdentityRolesIdMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiIdentityRolesId>>, TError,{id: string;data: NonReadonly<VoloAbpIdentityIdentityRoleUpdateDto>}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof putApiIdentityRolesId>>, TError,{id: string;data: NonReadonly<VoloAbpIdentityIdentityRoleUpdateDto>}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof putApiIdentityRolesId>>, {id: string;data: NonReadonly<VoloAbpIdentityIdentityRoleUpdateDto>}> = (props) => {
          const {id,data} = props ?? {};

          return  putApiIdentityRolesId(id,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PutApiIdentityRolesIdMutationResult = NonNullable<Awaited<ReturnType<typeof putApiIdentityRolesId>>>
    export type PutApiIdentityRolesIdMutationBody = NonReadonly<VoloAbpIdentityIdentityRoleUpdateDto>
    export type PutApiIdentityRolesIdMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePutApiIdentityRolesId = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof putApiIdentityRolesId>>, TError,{id: string;data: NonReadonly<VoloAbpIdentityIdentityRoleUpdateDto>}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPutApiIdentityRolesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteApiIdentityRolesId = (
    id: string,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/api/identity/roles/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteApiIdentityRolesIdMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiIdentityRolesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteApiIdentityRolesId>>, TError,{id: string}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteApiIdentityRolesId>>, {id: string}> = (props) => {
          const {id} = props ?? {};

          return  deleteApiIdentityRolesId(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteApiIdentityRolesIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteApiIdentityRolesId>>>
    
    export type DeleteApiIdentityRolesIdMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const useDeleteApiIdentityRolesId = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteApiIdentityRolesId>>, TError,{id: string}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getDeleteApiIdentityRolesIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    