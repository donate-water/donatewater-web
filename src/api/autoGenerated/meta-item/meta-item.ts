/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  IIASAFieldSurveyDtosMetaItemDto,
  IIASAFieldSurveyDtosQuestionDto,
  VoloAbpHttpRemoteServiceErrorResponse
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postMetaitems = (
    iIASAFieldSurveyDtosMetaItemDto: IIASAFieldSurveyDtosMetaItemDto[],
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/metaitems`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iIASAFieldSurveyDtosMetaItemDto
    },
      options);
    }
  


export const getPostMetaitemsMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetaitems>>, TError,{data: IIASAFieldSurveyDtosMetaItemDto[]}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postMetaitems>>, TError,{data: IIASAFieldSurveyDtosMetaItemDto[]}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMetaitems>>, {data: IIASAFieldSurveyDtosMetaItemDto[]}> = (props) => {
          const {data} = props ?? {};

          return  postMetaitems(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostMetaitemsMutationResult = NonNullable<Awaited<ReturnType<typeof postMetaitems>>>
    export type PostMetaitemsMutationBody = IIASAFieldSurveyDtosMetaItemDto[]
    export type PostMetaitemsMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostMetaitems = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetaitems>>, TError,{data: IIASAFieldSurveyDtosMetaItemDto[]}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostMetaitemsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getMetaitems = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyDtosMetaItemDto[]>(
      {url: `/metaitems`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMetaitemsQueryKey = () => {
    return [`/metaitems`] as const;
    }

    
export const getGetMetaitemsQueryOptions = <TData = Awaited<ReturnType<typeof getMetaitems>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitems>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetaitemsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetaitems>>> = ({ signal }) => getMetaitems(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetaitems>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMetaitemsQueryResult = NonNullable<Awaited<ReturnType<typeof getMetaitems>>>
export type GetMetaitemsQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetMetaitems = <TData = Awaited<ReturnType<typeof getMetaitems>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitems>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMetaitemsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMetaitemsMetaKey = (
    metaKey: string,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyDtosMetaItemDto[]>(
      {url: `/metaitems/${metaKey}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMetaitemsMetaKeyQueryKey = (metaKey: string,) => {
    return [`/metaitems/${metaKey}`] as const;
    }

    
export const getGetMetaitemsMetaKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMetaitemsMetaKey>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(metaKey: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsMetaKey>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetaitemsMetaKeyQueryKey(metaKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetaitemsMetaKey>>> = ({ signal }) => getMetaitemsMetaKey(metaKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(metaKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsMetaKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMetaitemsMetaKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMetaitemsMetaKey>>>
export type GetMetaitemsMetaKeyQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetMetaitemsMetaKey = <TData = Awaited<ReturnType<typeof getMetaitemsMetaKey>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 metaKey: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsMetaKey>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMetaitemsMetaKeyQueryOptions(metaKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteMetaitemsMetaKey = (
    metaKey: string,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/metaitems/${metaKey}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMetaitemsMetaKeyMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsMetaKey>>, TError,{metaKey: string}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsMetaKey>>, TError,{metaKey: string}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMetaitemsMetaKey>>, {metaKey: string}> = (props) => {
          const {metaKey} = props ?? {};

          return  deleteMetaitemsMetaKey(metaKey,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteMetaitemsMetaKeyMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMetaitemsMetaKey>>>
    
    export type DeleteMetaitemsMetaKeyMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const useDeleteMetaitemsMetaKey = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsMetaKey>>, TError,{metaKey: string}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getDeleteMetaitemsMetaKeyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteMetaitemsItemId = (
    id: number,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/metaitems/item/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMetaitemsItemIdMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsItemId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsItemId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMetaitemsItemId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMetaitemsItemId(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteMetaitemsItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMetaitemsItemId>>>
    
    export type DeleteMetaitemsItemIdMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const useDeleteMetaitemsItemId = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsItemId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getDeleteMetaitemsItemIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postMetaitemsQuestions = (
    iIASAFieldSurveyDtosQuestionDto: IIASAFieldSurveyDtosQuestionDto[],
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/metaitems/questions`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iIASAFieldSurveyDtosQuestionDto
    },
      options);
    }
  


export const getPostMetaitemsQuestionsMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetaitemsQuestions>>, TError,{data: IIASAFieldSurveyDtosQuestionDto[]}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postMetaitemsQuestions>>, TError,{data: IIASAFieldSurveyDtosQuestionDto[]}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postMetaitemsQuestions>>, {data: IIASAFieldSurveyDtosQuestionDto[]}> = (props) => {
          const {data} = props ?? {};

          return  postMetaitemsQuestions(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostMetaitemsQuestionsMutationResult = NonNullable<Awaited<ReturnType<typeof postMetaitemsQuestions>>>
    export type PostMetaitemsQuestionsMutationBody = IIASAFieldSurveyDtosQuestionDto[]
    export type PostMetaitemsQuestionsMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostMetaitemsQuestions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postMetaitemsQuestions>>, TError,{data: IIASAFieldSurveyDtosQuestionDto[]}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostMetaitemsQuestionsMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getMetaitemsQuestions = (
    
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyDtosQuestionDto[]>(
      {url: `/metaitems/questions`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMetaitemsQuestionsQueryKey = () => {
    return [`/metaitems/questions`] as const;
    }

    
export const getGetMetaitemsQuestionsQueryOptions = <TData = Awaited<ReturnType<typeof getMetaitemsQuestions>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>( options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsQuestions>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetaitemsQuestionsQueryKey();

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetaitemsQuestions>>> = ({ signal }) => getMetaitemsQuestions(requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsQuestions>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMetaitemsQuestionsQueryResult = NonNullable<Awaited<ReturnType<typeof getMetaitemsQuestions>>>
export type GetMetaitemsQuestionsQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetMetaitemsQuestions = <TData = Awaited<ReturnType<typeof getMetaitemsQuestions>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
  options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsQuestions>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMetaitemsQuestionsQueryOptions(options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getMetaitemsQuestionsMetaKey = (
    metaKey: string,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyDtosQuestionDto[]>(
      {url: `/metaitems/questions/${metaKey}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetMetaitemsQuestionsMetaKeyQueryKey = (metaKey: string,) => {
    return [`/metaitems/questions/${metaKey}`] as const;
    }

    
export const getGetMetaitemsQuestionsMetaKeyQueryOptions = <TData = Awaited<ReturnType<typeof getMetaitemsQuestionsMetaKey>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(metaKey: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsQuestionsMetaKey>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetMetaitemsQuestionsMetaKeyQueryKey(metaKey);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getMetaitemsQuestionsMetaKey>>> = ({ signal }) => getMetaitemsQuestionsMetaKey(metaKey, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(metaKey), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsQuestionsMetaKey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetMetaitemsQuestionsMetaKeyQueryResult = NonNullable<Awaited<ReturnType<typeof getMetaitemsQuestionsMetaKey>>>
export type GetMetaitemsQuestionsMetaKeyQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetMetaitemsQuestionsMetaKey = <TData = Awaited<ReturnType<typeof getMetaitemsQuestionsMetaKey>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 metaKey: string, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getMetaitemsQuestionsMetaKey>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetMetaitemsQuestionsMetaKeyQueryOptions(metaKey,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteMetaitemsQuestionsItemId = (
    id: number,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<void>(
      {url: `/metaitems/questions/item/${id}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteMetaitemsQuestionsItemIdMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsQuestionsItemId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsQuestionsItemId>>, TError,{id: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteMetaitemsQuestionsItemId>>, {id: number}> = (props) => {
          const {id} = props ?? {};

          return  deleteMetaitemsQuestionsItemId(id,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteMetaitemsQuestionsItemIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteMetaitemsQuestionsItemId>>>
    
    export type DeleteMetaitemsQuestionsItemIdMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const useDeleteMetaitemsQuestionsItemId = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteMetaitemsQuestionsItemId>>, TError,{id: number}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getDeleteMetaitemsQuestionsItemIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    