/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useQuery
} from '@tanstack/react-query'
import type {
  QueryFunction,
  QueryKey,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetDataDownloadCsvParams,
  GetDataDownloadGeojsonParams,
  GetLeaderboardCsvParams,
  GetLeaderboardParams,
  IIASAFieldSurveyDtosUserScore,
  VoloAbpHttpRemoteServiceErrorResponse
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const getLeaderboard = (
    params?: GetLeaderboardParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyDtosUserScore[]>(
      {url: `/leaderboard`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLeaderboardQueryKey = (params?: GetLeaderboardParams,) => {
    return [`/leaderboard`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLeaderboardQueryOptions = <TData = Awaited<ReturnType<typeof getLeaderboard>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetLeaderboardParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLeaderboard>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLeaderboardQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLeaderboard>>> = ({ signal }) => getLeaderboard(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLeaderboard>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLeaderboardQueryResult = NonNullable<Awaited<ReturnType<typeof getLeaderboard>>>
export type GetLeaderboardQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetLeaderboard = <TData = Awaited<ReturnType<typeof getLeaderboard>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetLeaderboardParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLeaderboard>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLeaderboardQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getLeaderboardCsv = (
    params?: GetLeaderboardCsvParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<unknown>(
      {url: `/leaderboard/csv`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetLeaderboardCsvQueryKey = (params?: GetLeaderboardCsvParams,) => {
    return [`/leaderboard/csv`, ...(params ? [params]: [])] as const;
    }

    
export const getGetLeaderboardCsvQueryOptions = <TData = Awaited<ReturnType<typeof getLeaderboardCsv>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetLeaderboardCsvParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLeaderboardCsv>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetLeaderboardCsvQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getLeaderboardCsv>>> = ({ signal }) => getLeaderboardCsv(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getLeaderboardCsv>>, TError, TData> & { queryKey: QueryKey }
}

export type GetLeaderboardCsvQueryResult = NonNullable<Awaited<ReturnType<typeof getLeaderboardCsv>>>
export type GetLeaderboardCsvQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetLeaderboardCsv = <TData = Awaited<ReturnType<typeof getLeaderboardCsv>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetLeaderboardCsvParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getLeaderboardCsv>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetLeaderboardCsvQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataDownloadCsv = (
    params?: GetDataDownloadCsvParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<unknown>(
      {url: `/data/download/csv`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDataDownloadCsvQueryKey = (params?: GetDataDownloadCsvParams,) => {
    return [`/data/download/csv`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDataDownloadCsvQueryOptions = <TData = Awaited<ReturnType<typeof getDataDownloadCsv>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetDataDownloadCsvParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDataDownloadCsv>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDataDownloadCsvQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataDownloadCsv>>> = ({ signal }) => getDataDownloadCsv(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDataDownloadCsv>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDataDownloadCsvQueryResult = NonNullable<Awaited<ReturnType<typeof getDataDownloadCsv>>>
export type GetDataDownloadCsvQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetDataDownloadCsv = <TData = Awaited<ReturnType<typeof getDataDownloadCsv>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetDataDownloadCsvParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDataDownloadCsv>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDataDownloadCsvQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getDataDownloadGeojson = (
    params?: GetDataDownloadGeojsonParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<unknown>(
      {url: `/data/download/geojson`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetDataDownloadGeojsonQueryKey = (params?: GetDataDownloadGeojsonParams,) => {
    return [`/data/download/geojson`, ...(params ? [params]: [])] as const;
    }

    
export const getGetDataDownloadGeojsonQueryOptions = <TData = Awaited<ReturnType<typeof getDataDownloadGeojson>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetDataDownloadGeojsonParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDataDownloadGeojson>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetDataDownloadGeojsonQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getDataDownloadGeojson>>> = ({ signal }) => getDataDownloadGeojson(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getDataDownloadGeojson>>, TError, TData> & { queryKey: QueryKey }
}

export type GetDataDownloadGeojsonQueryResult = NonNullable<Awaited<ReturnType<typeof getDataDownloadGeojson>>>
export type GetDataDownloadGeojsonQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetDataDownloadGeojson = <TData = Awaited<ReturnType<typeof getDataDownloadGeojson>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetDataDownloadGeojsonParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getDataDownloadGeojson>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetDataDownloadGeojsonQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



