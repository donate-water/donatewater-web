/**
 * Generated by orval v6.25.0 üç∫
 * Do not edit manually.
 * FieldSurvey API
 * OpenAPI spec version: v1
 */
import {
  useMutation,
  useQuery
} from '@tanstack/react-query'
import type {
  MutationFunction,
  QueryFunction,
  QueryKey,
  UseMutationOptions,
  UseQueryOptions,
  UseQueryResult
} from '@tanstack/react-query'
import type {
  GetSurveyMapParams,
  GetSurveyParams,
  IIASAFieldSurveyDtosSurveyDto,
  IIASAFieldSurveyDtosSurveyDtoForGet,
  PostSurveySurveyIdImageBody,
  VoloAbpApplicationDtosPagedResultDto1IIASAFieldSurveyDtosSurveyDtoForGetIIASAFieldSurveyApplicationContractsVersion1000CultureNeutralPublicKeyTokenNull,
  VoloAbpApplicationDtosPagedResultDto1IIASAFieldSurveyDtosSurveyMapDtoIIASAFieldSurveyApplicationContractsVersion1000CultureNeutralPublicKeyTokenNull,
  VoloAbpHttpRemoteServiceErrorResponse
} from '.././schemas'
import { http } from '../../apiClient';
import type { ErrorType } from '../../apiClient';


type SecondParameter<T extends (...args: any) => any> = Parameters<T>[1];


export const postSurvey = (
    iIASAFieldSurveyDtosSurveyDto: IIASAFieldSurveyDtosSurveyDto,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<number>(
      {url: `/survey`, method: 'POST',
      headers: {'Content-Type': 'application/json', },
      data: iIASAFieldSurveyDtosSurveyDto
    },
      options);
    }
  


export const getPostSurveyMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSurvey>>, TError,{data: IIASAFieldSurveyDtosSurveyDto}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postSurvey>>, TError,{data: IIASAFieldSurveyDtosSurveyDto}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSurvey>>, {data: IIASAFieldSurveyDtosSurveyDto}> = (props) => {
          const {data} = props ?? {};

          return  postSurvey(data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostSurveyMutationResult = NonNullable<Awaited<ReturnType<typeof postSurvey>>>
    export type PostSurveyMutationBody = IIASAFieldSurveyDtosSurveyDto
    export type PostSurveyMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostSurvey = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSurvey>>, TError,{data: IIASAFieldSurveyDtosSurveyDto}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostSurveyMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const getSurvey = (
    params?: GetSurveyParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<VoloAbpApplicationDtosPagedResultDto1IIASAFieldSurveyDtosSurveyDtoForGetIIASAFieldSurveyApplicationContractsVersion1000CultureNeutralPublicKeyTokenNull>(
      {url: `/survey`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSurveyQueryKey = (params?: GetSurveyParams,) => {
    return [`/survey`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSurveyQueryOptions = <TData = Awaited<ReturnType<typeof getSurvey>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetSurveyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurvey>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSurveyQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSurvey>>> = ({ signal }) => getSurvey(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSurvey>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSurveyQueryResult = NonNullable<Awaited<ReturnType<typeof getSurvey>>>
export type GetSurveyQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetSurvey = <TData = Awaited<ReturnType<typeof getSurvey>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetSurveyParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurvey>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSurveyQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSurveyMap = (
    params?: GetSurveyMapParams,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<VoloAbpApplicationDtosPagedResultDto1IIASAFieldSurveyDtosSurveyMapDtoIIASAFieldSurveyApplicationContractsVersion1000CultureNeutralPublicKeyTokenNull>(
      {url: `/survey/map`, method: 'GET',
        params, signal
    },
      options);
    }
  

export const getGetSurveyMapQueryKey = (params?: GetSurveyMapParams,) => {
    return [`/survey/map`, ...(params ? [params]: [])] as const;
    }

    
export const getGetSurveyMapQueryOptions = <TData = Awaited<ReturnType<typeof getSurveyMap>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(params?: GetSurveyMapParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveyMap>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSurveyMapQueryKey(params);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSurveyMap>>> = ({ signal }) => getSurveyMap(params, requestOptions, signal);

      

      

   return  { queryKey, queryFn, ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSurveyMap>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSurveyMapQueryResult = NonNullable<Awaited<ReturnType<typeof getSurveyMap>>>
export type GetSurveyMapQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetSurveyMap = <TData = Awaited<ReturnType<typeof getSurveyMap>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 params?: GetSurveyMapParams, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveyMap>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSurveyMapQueryOptions(params,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const getSurveySurveyId = (
    surveyId: number,
 options?: SecondParameter<typeof http>,signal?: AbortSignal
) => {
      
      
      return http<IIASAFieldSurveyDtosSurveyDtoForGet>(
      {url: `/survey/${surveyId}`, method: 'GET', signal
    },
      options);
    }
  

export const getGetSurveySurveyIdQueryKey = (surveyId: number,) => {
    return [`/survey/${surveyId}`] as const;
    }

    
export const getGetSurveySurveyIdQueryOptions = <TData = Awaited<ReturnType<typeof getSurveySurveyId>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(surveyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyId>>, TError, TData>, request?: SecondParameter<typeof http>}
) => {

const {query: queryOptions, request: requestOptions} = options ?? {};

  const queryKey =  queryOptions?.queryKey ?? getGetSurveySurveyIdQueryKey(surveyId);

  

    const queryFn: QueryFunction<Awaited<ReturnType<typeof getSurveySurveyId>>> = ({ signal }) => getSurveySurveyId(surveyId, requestOptions, signal);

      

      

   return  { queryKey, queryFn, enabled: !!(surveyId), ...queryOptions} as UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyId>>, TError, TData> & { queryKey: QueryKey }
}

export type GetSurveySurveyIdQueryResult = NonNullable<Awaited<ReturnType<typeof getSurveySurveyId>>>
export type GetSurveySurveyIdQueryError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

export const useGetSurveySurveyId = <TData = Awaited<ReturnType<typeof getSurveySurveyId>>, TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>>(
 surveyId: number, options?: { query?:UseQueryOptions<Awaited<ReturnType<typeof getSurveySurveyId>>, TError, TData>, request?: SecondParameter<typeof http>}

  ):  UseQueryResult<TData, TError> & { queryKey: QueryKey } => {

  const queryOptions = getGetSurveySurveyIdQueryOptions(surveyId,options)

  const query = useQuery(queryOptions) as  UseQueryResult<TData, TError> & { queryKey: QueryKey };

  query.queryKey = queryOptions.queryKey ;

  return query;
}



export const deleteSurveySurveyId = (
    surveyId: number,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<boolean>(
      {url: `/survey/${surveyId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSurveySurveyIdMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSurveySurveyId>>, TError,{surveyId: number}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSurveySurveyId>>, TError,{surveyId: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSurveySurveyId>>, {surveyId: number}> = (props) => {
          const {surveyId} = props ?? {};

          return  deleteSurveySurveyId(surveyId,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteSurveySurveyIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSurveySurveyId>>>
    
    export type DeleteSurveySurveyIdMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const useDeleteSurveySurveyId = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSurveySurveyId>>, TError,{surveyId: number}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getDeleteSurveySurveyIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const postSurveySurveyIdImage = (
    surveyId: number,
    postSurveySurveyIdImageBody: PostSurveySurveyIdImageBody,
 options?: SecondParameter<typeof http>,) => {
      
      const formData = new FormData();
if(postSurveySurveyIdImageBody.imageFile !== undefined) {
 formData.append('imageFile', postSurveySurveyIdImageBody.imageFile)
 }
if(postSurveySurveyIdImageBody.data !== undefined) {
 formData.append('data', postSurveySurveyIdImageBody.data)
 }

      return http<number>(
      {url: `/survey/${surveyId}/image`, method: 'POST',
      headers: {'Content-Type': 'multipart/form-data', },
       data: formData
    },
      options);
    }
  


export const getPostSurveySurveyIdImageMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSurveySurveyIdImage>>, TError,{surveyId: number;data: PostSurveySurveyIdImageBody}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof postSurveySurveyIdImage>>, TError,{surveyId: number;data: PostSurveySurveyIdImageBody}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof postSurveySurveyIdImage>>, {surveyId: number;data: PostSurveySurveyIdImageBody}> = (props) => {
          const {surveyId,data} = props ?? {};

          return  postSurveySurveyIdImage(surveyId,data,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type PostSurveySurveyIdImageMutationResult = NonNullable<Awaited<ReturnType<typeof postSurveySurveyIdImage>>>
    export type PostSurveySurveyIdImageMutationBody = PostSurveySurveyIdImageBody
    export type PostSurveySurveyIdImageMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const usePostSurveySurveyIdImage = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof postSurveySurveyIdImage>>, TError,{surveyId: number;data: PostSurveySurveyIdImageBody}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getPostSurveySurveyIdImageMutationOptions(options);

      return useMutation(mutationOptions);
    }
    export const deleteSurveySurveyIdImageImageId = (
    surveyId: number,
    imageId: number,
 options?: SecondParameter<typeof http>,) => {
      
      
      return http<boolean>(
      {url: `/survey/${surveyId}/image/${imageId}`, method: 'DELETE'
    },
      options);
    }
  


export const getDeleteSurveySurveyIdImageImageIdMutationOptions = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSurveySurveyIdImageImageId>>, TError,{surveyId: number;imageId: number}, TContext>, request?: SecondParameter<typeof http>}
): UseMutationOptions<Awaited<ReturnType<typeof deleteSurveySurveyIdImageImageId>>, TError,{surveyId: number;imageId: number}, TContext> => {
 const {mutation: mutationOptions, request: requestOptions} = options ?? {};

      


      const mutationFn: MutationFunction<Awaited<ReturnType<typeof deleteSurveySurveyIdImageImageId>>, {surveyId: number;imageId: number}> = (props) => {
          const {surveyId,imageId} = props ?? {};

          return  deleteSurveySurveyIdImageImageId(surveyId,imageId,requestOptions)
        }

        


   return  { mutationFn, ...mutationOptions }}

    export type DeleteSurveySurveyIdImageImageIdMutationResult = NonNullable<Awaited<ReturnType<typeof deleteSurveySurveyIdImageImageId>>>
    
    export type DeleteSurveySurveyIdImageImageIdMutationError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>

    export const useDeleteSurveySurveyIdImageImageId = <TError = ErrorType<VoloAbpHttpRemoteServiceErrorResponse>,
    TContext = unknown>(options?: { mutation?:UseMutationOptions<Awaited<ReturnType<typeof deleteSurveySurveyIdImageImageId>>, TError,{surveyId: number;imageId: number}, TContext>, request?: SecondParameter<typeof http>}
) => {

      const mutationOptions = getDeleteSurveySurveyIdImageImageIdMutationOptions(options);

      return useMutation(mutationOptions);
    }
    