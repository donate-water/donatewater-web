import L, { LatLng } from 'leaflet';
import Link from 'next/link';
import {
  MapContainer,
  Marker,
  Popup,
  TileLayer,
  ZoomControl,
} from 'react-leaflet';

import type { IIASAFieldSurveyDtosSurveyMapDto } from '@/api/autoGenerated/schemas';
import { IIASAFieldSurveyEnumReviewStatus } from '@/api/autoGenerated/schemas';
import { baseUrl } from '@/config';

const greenIcon = new L.Icon({
  iconUrl: '/s1.svg',
  iconRetinaUrl: '/icon.svg',
  popupAnchor: [-0, -0],
  iconSize: [45, 45],
});

const redIcon = new L.Icon({
  iconUrl: '/s2.svg',
  iconRetinaUrl: '/icon.svg',
  popupAnchor: [-0, -0],
  iconSize: [45, 45],
});

interface MapElementProps {
  isLoading: boolean;
  items: IIASAFieldSurveyDtosSurveyMapDto[] | null | undefined;
}

const SurveyMapElement = (props: MapElementProps) => {
  function getMarker(item: IIASAFieldSurveyDtosSurveyMapDto) {
    if (!item.location) return <div />;

    const element = item.location[0];

    if (element === undefined) return <div />;

    const markerPosition = new LatLng(
      element.yLat as number,
      element.xLng as number
    );

    return (
      <Marker
        icon={
          item.status === IIASAFieldSurveyEnumReviewStatus.Completed
            ? greenIcon
            : redIcon
        }
        key={`marker${item.id}`}
        position={markerPosition}
      >
        <Popup key={`popup${item.id}`} className="h-auto w-auto">
          <div className="grid w-40 grid-cols-1 ">
            <span className="hover:underline">
              <Link href={`${baseUrl}/review/${item.id}`}>
                Survey ID: {item.id}
              </Link>
            </span>
            <span>Status: {item.status}</span>
            <span>
              Created On: {item.creationTime?.toString().substring(0, 10)}
            </span>
            <span>Images Count:{item.images?.length}</span>
          </div>
        </Popup>
      </Marker>
    );
  }

  return (
    <MapContainer
      className="surveymap"
      zoom={3}
      center={new LatLng(8.505, 34.09)}
      style={{
        height: '100vh',
        width: '99.1vw',
      }}
      zoomControl={false}
    >
      <TileLayer
        attribution='&copy; <a href="https://www.openstreetmap.org/copyright">OpenStreetMap</a> contributors'
        url="https://clarity.maptiles.arcgis.com/arcgis/rest/services/World_Imagery/MapServer/tile/{z}/{y}/{x}"
      />
      {!props.isLoading &&
        props.items &&
        props.items.map((item) => getMarker(item))}
      <ZoomControl position="bottomleft" />
    </MapContainer>
  );
};
export default SurveyMapElement;
