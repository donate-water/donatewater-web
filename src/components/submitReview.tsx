import type { QueryKey } from '@tanstack/react-query';
import { useQueryClient } from '@tanstack/react-query';
import React, { useState } from 'react';
import type { SubmitHandler } from 'react-hook-form';
import { useForm } from 'react-hook-form';

import { IIASAFieldSurveyEnumReviewStatus } from '@/api/autoGenerated/schemas';
import { usePostSurveySurveyIdReview } from '@/api/autoGenerated/survey-review/survey-review';
import { classNames } from '@/utils/Helpers';

type ReviewInputs = {
  status: IIASAFieldSurveyEnumReviewStatus;
  comments: string;
  rating: number;
};

type SurveyDetails = {
  surveyId: string;
  input: ReviewInputs;

  queryKey: QueryKey;
  onSubmitClick: () => void;
};

export default function SubmitReview(props: SurveyDetails) {
  const { register, handleSubmit, setValue, getValues } =
    useForm<ReviewInputs>();
  const postReview = usePostSurveySurveyIdReview();
  const queryClient = useQueryClient();
  const [rating, setRating] = useState(
    props.input.rating === undefined ? 0 : props.input.rating
  );

  const onSubmit: SubmitHandler<ReviewInputs> = (data) => {
    postReview
      .mutateAsync({
        surveyId: parseInt(props.surveyId, 10),
        data: {
          status: data.status,
          comment: data.comments,
          surveyRating: rating,
        },
      })
      .then(() => {
        queryClient.invalidateQueries(props.queryKey).then();
        props.onSubmitClick();
      });
  };
  return (
    <form onSubmit={handleSubmit(onSubmit)}>
      <h3>Submit Review</h3>
      <dl className="grid grid-cols-1 gap-x-4 gap-y-8 rounded-md border border-gray-900 bg-gray-900 py-8 pl-2 text-lg font-medium text-white hover:border-black md:px-12 lg:grid-cols-4">
        {/* Survey */}
        <div className="sm:col-span-1">
          <dt className="font-bold  text-gray-500">Survey Id</dt>
          <dd className="">{props.surveyId}</dd>
        </div>
        <div className="grid w-full sm:col-span-3 sm:grid-cols-10">
          <dt className="pb-2 font-bold text-gray-500 sm:col-span-10 ">
            Rate Survey
          </dt>
          {Array.from({ length: 10 }, (_, k) => k + 1).map((item) => (
            <button
              key={`buttonItem${item}`}
              type="button"
              onClick={() => {
                setRating(item);
                if (item > 7) {
                  setValue('status', 'Completed');
                } else {
                  setValue('status', 'Rejected');
                }
              }}
              className={classNames(
                rating < item
                  ? 'bg-black  text-gray-500'
                  : 'bg-green-500 text-black',
                ' mr-4 mt-2 lg:mt-0 rounded-md text-lg font-semibold shadow-sm hover:text-white hover:bg-gray-800 focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white'
              )}
            >
              {item}
            </button>
          ))}
        </div>
        <div className="sm:col-span-1">
          <dt className="font-bold text-gray-500">Review Status</dt>
          <dd className="">
            <select
              disabled
              defaultValue={props.input.status}
              className="rounded-sm border border-white bg-gray-900 p-2 text-white "
              {...register('status')}
            >
              <option
                className="bg-gray-900 text-white"
                value={IIASAFieldSurveyEnumReviewStatus.Completed}
              >
                {IIASAFieldSurveyEnumReviewStatus.Completed}
              </option>
              <option
                className="bg-gray-900 text-white"
                value={IIASAFieldSurveyEnumReviewStatus.NotReviewed}
              >
                {IIASAFieldSurveyEnumReviewStatus.NotReviewed}
              </option>
              <option
                className="bg-gray-900 text-white"
                value={IIASAFieldSurveyEnumReviewStatus.Rejected}
              >
                {IIASAFieldSurveyEnumReviewStatus.Rejected}
              </option>
            </select>
          </dd>
        </div>
        <div className="sm:col-span-3">
          <dt className="font-bold text-gray-500">Comments</dt>
          <dd className="">
            <textarea
              defaultValue={props.input.comments}
              className="w-96 rounded-sm border border-white bg-gray-900  text-white"
              {...register('comments')}
            />
          </dd>
        </div>
        <div className="sm:col-span-1">
          <dt className="font-bold  text-gray-500">
            Calculated Score (10 X Rating)
          </dt>
          <dd className="">{rating * 10}</dd>
        </div>
        <div className="sm:col-span-1">
          <dt className="font-bold  text-gray-500">Tokens</dt>
          <dd className="">{getValues('status') === 'Completed' ? 1 : 0}</dd>
        </div>
        <div className="align-bottom sm:col-span-2">
          <dd className="mt-1  p-2 text-right ">
            <button
              type="submit"
              className="rounded-md bg-black  px-3.5 py-2.5 text-lg font-semibold text-gray-500 shadow-sm hover:text-white focus-visible:outline focus-visible:outline-2 focus-visible:outline-offset-2 focus-visible:outline-white"
            >
              Submit
            </button>
          </dd>
        </div>
        <p className="sm:col-span-3">
          A token will be awarded to the users only if the rating is above 7.!
        </p>
      </dl>
    </form>
  );
}
